{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","deactivateEditMode","updateStatus","onClick","onBlur","autoFocus","onChange","e","currentTarget","value","type","onSubmit","ProfileDataFormReduxForm","reduxForm","form","profile","error","handleSubmit","className","style","formSummaryError","Field","placeholder","name","component","Input","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","alt","mainPhoto","target","files","initialValues","then","Post","item","message","likeCounter","maxLength100","maxLengthCreator","MyPosts","React","memo","postsElements","posts","p","id","likesCount","postsBlock","AddPostFormRedux","values","addPost","newPostBody","Textarea","validate","requiredField","MySuperPostContainer","connect","state","profilePage","newText","dispatch","text","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","setUserProfile","withRouter"],"mappings":"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","file":"static/js/3.e9a125bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\n\ntype ProfileStatusType = {\n    status: string,\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n    return (\n        <div>\n            {!editMode &&\n            <div>\n                <b>Status: </b><span onClick={activateEditMode}>{props.status || \"------\"}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onBlur={deactivateEditMode} autoFocus={true} onChange={onStatusChange} value={status}\n                       type=\"text\" onSubmit={deactivateEditMode}/>\n            </div>\n            }\n        </div>\n    )\n\n}\n","import React from \"react\";\nimport {ProfileType} from \"../../../redux/profile-reducer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../../common/FormsControls/FormsControls\";\nimport s from './ProfileInfo.module.css'\nimport style from '../../common/FormsControls/FormsControls.module.css'\n\n\ntype ProfileDataFormPropsType = {\n    profile: ProfileType\n}\n\n\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = ({\n                                                                                                                                   profile,\n                                                                                                                                   error,\n                                                                                                                                   ...props\n                                                                                                                               }) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <button>save</button>\n            </div>\n            {error && <div className={style.formSummaryError}>\n                {error}\n            </div>}\n            <div>\n                <b>Full name</b>: <Field placeholder={'Full name'} name={'fullName'} component={Input}/>\n            </div>\n            <div>\n                <b>Looking for a job:</b><Field placeholder={'looking for a job'} name={'lookingForAJob'}\n                                                type={'checkbox'} component={Input}/>\n            </div>\n            <div><b>Looking for a job description</b>: <Field placeholder={'Looking for a job description'}\n                                                              name={'lookingForAJobDescription'} component={Input}/>\n            </div>\n            <div>\n                <b>About me:</b> <Field placeholder={'About me'} name={'aboutMe'} component={Input}/>\n            </div>\n            <div>\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\n                return <div className={s.contact} key={key}>\n                    <b>{key}: <Field placeholder={key} name={`contacts.${key}`} component={Input}/></b>\n                </div>\n            })}\n            </div>\n        </form>\n    )\n}\n\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from \"react\";\nimport s from './ProfileInfo.module.css';\nimport {Preloader} from \"../../common/Preloader\";\nimport {ProfileType} from \"../../../redux/profile-reducer\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/pngtree-user-vector-avatar-png-image_1541962.jpeg\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    isOwner: boolean\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<void>\n}\n\nconst ProfileInfo: React.FC<ProfilePropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n    const [editMode, setEditMode] = useState(false)\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (profile: ProfileType) => {\n        saveProfile(profile).then(() => {\n            setEditMode(false)\n        })\n    }\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large || userPhoto} alt=\"\" className={s.mainPhoto}/>\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\n                {editMode ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit} profile={profile}/> :\n                    <ProfileData profile={profile} isOwner={isOwner} goToEditMode={setEditMode}/>}\n                <div>\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: (editMode: boolean) => void\n}\n\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n    return (\n        <div>\n            {isOwner && <div>\n                <button onClick={() => goToEditMode(true)}>edit</button>\n            </div>}\n            <div>\n                <b>Full name</b>: {profile.fullName}\n            </div>\n            <div>\n                <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\n            </div>\n            {profile.lookingForAJob &&\n            <div>\n                <b>My professional skills</b> : {profile.lookingForAJobDescription}\n            </div>}\n            <div>\n                <b>About me:</b> {profile.aboutMe}\n            </div>\n            <div>\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n            })}\n            </div>\n        </div>\n    )\n}\n\n\ntype ContactPropsType = {\n    contactTitle: string\n    contactValue: string\n}\n\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n\n}\n\nexport default ProfileInfo;","import React from \"react\";\nimport s from './Post.module.css';\n// import './MyPosts.module.css';\n\ntype PostType = {\n    message: string\n    likeCounter: number\n}\n\nfunction Post(props: PostType) {\n    return <div className={s.item}>\n        <img\n            src=\"https://avatars.mds.yandex.net/get-kino-vod-films-gallery/28788/47e2fd514411e18b76af786d7417062d/280x178_2\"\n            alt=\"\"/>\n        {props.message}\n        <div>\n            <span> {props.likeCounter} like(s)</span>\n        </div>\n    </div>\n\n}\n\nexport default Post;","import React from \"react\";\nimport s from './MyPosts.module.css';\nimport Post from \"./Post/Post\";\nimport './MyPosts.module.css';\nimport {PostType} from \"../../../redux/messages-reducer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, requiredField} from \"../../../Utils/Validators/validators\";\n\ntype MyPostsType = {\n    posts: Array<PostType>\n    value: string\n    addPost: (text: string) => void\n}\ntype FormDataType = {\n    newPostBody: string\n}\n\nconst maxLength100 = maxLengthCreator(100)\n\nconst MyPosts = React.memo((props: MyPostsType) => {\n    let postsElements = props.posts.map((p, id) => <Post key={id} message={p.message}\n                                                         likeCounter={p.likesCount}/>);\n    // let newPostElement = React.createRef<HTMLTextAreaElement>();\n    let onAddPost = (values: FormDataType) => {\n        if (values) {\n            props.addPost(values.newPostBody);\n        }\n\n    }\n\n    return <div className={s.postsBlock}>\n        <div>\n            <h3>My posts</h3>\n        </div>\n        <AddPostFormRedux onSubmit={onAddPost}/>\n\n        <div className={\"s.posts\"}>\n            {postsElements}\n        </div>\n    </div>\n})\n\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field name={'newPostBody'} component={Textarea} placeholder={'Enter your post text'}\n                       validate={[requiredField, maxLength100]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddPostFormRedux = reduxForm<FormDataType>({\n    form: 'profileAddPostForm'\n})(AddPostForm)\n\nexport default MyPosts;","import React from \"react\";\nimport './MyPosts.module.css';\nimport {addPost, changeText, ProfileReducerTypes} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppRootStateType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\nlet MapStateToStore = (state: AppRootStateType) => {\n    return {\n        posts: state.profilePage.posts,\n        value: state.profilePage.newText\n    }\n}\nlet MapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addPost: (text: string) => {\n            if (text) {\n                dispatch(addPost(text))\n            }\n        }\n    }\n}\n\nexport const MySuperPostContainer = connect(MapStateToStore, MapDispatchToProps)(MyPosts)\n","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport {MySuperPostContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"../../redux/profile-reducer\";\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    isOwner: boolean\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<void>\n}\n\nfunction Profile(props: ProfilePropsType) {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} isOwner={props.isOwner} savePhoto={props.savePhoto} saveProfile={props.saveProfile} />\n\n            <MySuperPostContainer/>\n        </div>\n    )\n}\n\nexport default Profile;","import {getStatus, ProfileType, savePhoto, saveProfile, setStatus, updateStatus} from '../../redux/profile-reducer'\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {setUserProfile} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {getUserProfile} from \"../../redux/auth-reducer\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\nimport React, {ComponentType} from \"react\";\nimport {compose} from \"redux\";\n\ntype MapStatePropsType = {\n    profile: ProfileType | null\n    status: string\n    authorizedUserId: string\n}\n\ntype MapDispatchPropsType = {\n    setUserProfile: (profile: ProfileType) => void\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    setStatus: (status: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<void>\n}\n\nexport type ProfilePropsType = MapDispatchPropsType & MapStatePropsType\n\ntype PathParamsType = {\n    userId: string\n}\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n    refreshProfile() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.setStatus('')\n    }\n\n    render() {\n        return (\n            <Profile status={this.props.status} updateStatus={this.props.updateStatus} profile={this.props.profile}\n                     isOwner={!this.props.match.params.userId} savePhoto={this.props.savePhoto}\n                     saveProfile={this.props.saveProfile}/>\n        )\n    }\n\n}\n\n\nlet mapStateToProps = (state: AppRootStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n\n    }\n}\n\n\nexport default compose<ComponentType>(connect(mapStateToProps, {\n    setUserProfile,\n    getUserProfile,\n    getStatus,\n    updateStatus,\n    setStatus,\n    savePhoto,\n    saveProfile\n}), withRouter)(ProfileContainer)\n\n\n"],"sourceRoot":""}