{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","activeClassName","name","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","requiredField","Dialogs","isAuth","state","addMessage","dialogsElements","dialogs","map","messagesElements","messages","message","dialogsItems","values","newMessageBody","compose","withAuthRedirect","connect","messagesPage","auth","dispatch","addNewMessageCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,6FCgBnKC,EAN4B,SAACC,GACxC,IAAIC,EAAO,aAAeD,EAAME,GAChC,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,cAAC,IAAD,CAASC,GAAIN,EAAMO,gBAAiBJ,IAAEE,OAAtC,SAA+CN,EAAMS,U,0CCKvDC,EAAeC,YAAiB,KAkChCC,EAAsBC,YAAwB,CAChDC,KAAM,wBADkBD,EAVsC,SAACb,GAC/D,OACI,uBAAMe,SAAUf,EAAMgB,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUV,KAAM,iBAAkBW,YAAa,qBAC1DC,SAAU,CAACC,IAAeZ,KACjC,+CAUGa,EAtC6B,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WACrDC,EAAkBF,EAAMG,QAAQC,KAAI,SAACxB,EAAQH,GAAT,OAAgB,cAAC,EAAD,CAAqBO,KAAMJ,EAAOI,KACtBP,GAAIG,EAAOH,IADNA,MAErE4B,EAAmBL,EAAMM,SAASF,KAAI,SAACG,EAAS9B,GAAV,OAAiB,gCAAe8B,EAAQA,QAAvB,MAAU9B,MAErE,IAAKsB,EAAQ,OAAO,cAAC,IAAD,CAAUjB,GAAI,WAKlC,OAAO,gCACH,sBAAKJ,UAAWC,IAAEwB,QAAlB,UACI,qBAAKzB,UAAWC,IAAE6B,aAAlB,SACKN,IAEL,qBAAKxB,UAAWC,IAAE2B,SAAlB,SACKD,OAGT,cAAClB,EAAD,CAAqBG,SAZL,SAACmB,GACjBR,EAAWQ,EAAOC,uB,yBCJXC,sBAAuBC,IAAkBC,aAflC,SAACb,GACnB,MAAO,CACHA,MAAOA,EAAMc,aACbf,OAAQC,EAAMe,KAAKhB,WAGF,SAACiB,GACtB,MAAO,CACHf,WAAY,SAACM,GACTS,EAASC,YAAqBV,SAM3BI,CAAuFb","file":"static/js/4.e0558e08.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React from 'react';\nimport s from '../Dialogs.module.css'\nimport {NavLink, Route} from \"react-router-dom\"\n\ntype TypeOfDialog = {\n    name: string\n    id: number\n\n}\n\n\nconst DialogItem: React.FC<TypeOfDialog> = (props) => {\n    let path = \"/dialogs/1\" + props.id\n    return <div className={s.dialog + ' ' + s.active}>\n        <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\n    </div>\n}\nexport default DialogItem;\n\n","import React from 'react';\nimport s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport {MessagesPageType} from '../../redux/messages-reducer';\nimport {Redirect} from 'react-router-dom';\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from \"../../Utils/Validators/validators\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\n\ntype DialogsTypeProps = {\n    state: MessagesPageType\n    addMessage: (message: string) => void\n    isAuth: boolean\n}\n\ntype FormDataType = {\n    newMessageBody: string\n}\n\nconst maxLength100 = maxLengthCreator(100)\nconst Dialogs: React.FC<DialogsTypeProps> = ({isAuth, state, addMessage}) => {\n    let dialogsElements = state.dialogs.map((dialog, id) => <DialogItem key={id} name={dialog.name}\n                                                                        id={dialog.id}/>);\n    let messagesElements = state.messages.map((message, id) => <div key={id}>{message.message} </div>);\n\n    if (!isAuth) return <Redirect to={'/login'}/>\n\n    let addNewMessage = (values: FormDataType) => {\n        addMessage(values.newMessageBody);\n    }\n    return <div>\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n            </div>\n        </div>\n        <AddMessageFormRedux onSubmit={addNewMessage}/>\n    </div>\n}\n\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field component={Textarea} name={'newMessageBody'} placeholder={'Enter your message'}\n                   validate={[requiredField, maxLength100]}/>\n            <button>add</button>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm<FormDataType>({\n    form: \"dialogAddMessageForm\"\n})(AddMessageForm)\n\n\nexport default Dialogs;","import React, {ComponentType} from 'react';\nimport {addNewMessageCreator,  MessagesReducerType} from '../../redux/messages-reducer';\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\nlet mapStateToProps = (state: AppRootStateType) => {\n    return {\n        state: state.messagesPage,\n        isAuth: state.auth.isAuth\n    }\n}\nlet mapDispatchToProps = (dispatch: (action: MessagesReducerType) => void) => {\n    return {\n        addMessage: (message: string) => {\n            dispatch(addNewMessageCreator(message))\n        }\n    }\n}\n\n\nexport default compose<ComponentType>(withAuthRedirect, connect(mapStateToProps, mapDispatchToProps))(Dialogs)\n"],"sourceRoot":""}