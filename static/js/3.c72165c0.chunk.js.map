{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","deactivateEditMode","updateStatus","onClick","onBlur","autoFocus","onChange","e","currentTarget","value","type","onSubmit","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","alt","Preloader","Post","item","message","likeCounter","maxLength100","maxLengthCreator","MyPosts","React","memo","console","log","postsElements","posts","map","p","id","likesCount","postsBlock","AddPostFormRedux","values","addPost","newPostBody","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","requiredField","MySuperPostContainer","connect","state","profilePage","newText","dispatch","text","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","setUserProfile","withRouter"],"mappings":"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","file":"static/js/3.c72165c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React, {ChangeEvent, Component, FC, useEffect, useState} from \"react\";\n\ntype ProfileStatusType = {\n    status: string,\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n    return (\n        <div>\n            {!editMode &&\n            <div>\n                <span onClick={activateEditMode}>{props.status || \"------\"}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onBlur={deactivateEditMode} autoFocus={true} onChange={onStatusChange} value={status}\n                       type=\"text\" onSubmit={deactivateEditMode}/>\n            </div>\n            }\n        </div>\n    )\n\n}\n","import React from \"react\";\nimport s from './ProfileInfo.module.css';\nimport {Preloader} from \"../../common/Preloader\";\nimport {ProfileType} from \"../../../redux/profile-reducer\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileInfo: React.FC<ProfilePropsType> = ({profile, status, updateStatus}) => {\n    if (!profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large} alt=\"\"/>\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </div>\n        </div>\n\n    )\n}\n\nexport default ProfileInfo;","import React from \"react\";\nimport s from './Post.module.css';\n// import './MyPosts.module.css';\n\ntype PostType = {\n    message: string\n    likeCounter: number\n}\n\nfunction Post(props: PostType) {\n    return <div className={s.item}>\n        <img\n            src=\"https://avatars.mds.yandex.net/get-kino-vod-films-gallery/28788/47e2fd514411e18b76af786d7417062d/280x178_2\"\n            alt=\"\"/>\n        {props.message}\n        <div>\n            <span> {props.likeCounter} like(s)</span>\n        </div>\n    </div>\n\n}\n\nexport default Post;","import React from \"react\";\nimport s from './MyPosts.module.css';\nimport Post from \"./Post/Post\";\nimport './MyPosts.module.css';\nimport {PostType} from \"../../../redux/messages-reducer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, requiredField} from \"../../../Utils/Validators/validators\";\n\ntype MyPostsType = {\n    posts: Array<PostType>\n    value: string\n    addPost: (text: string) => void\n}\ntype FormDataType = {\n    newPostBody: string\n}\n\nconst maxLength100 = maxLengthCreator(100)\n\nconst MyPosts = React.memo((props: MyPostsType) => {\n    console.log('render yo')\n    let postsElements = props.posts.map((p, id) => <Post key={id} message={p.message}\n                                                         likeCounter={p.likesCount}/>);\n    // let newPostElement = React.createRef<HTMLTextAreaElement>();\n    let onAddPost = (values: FormDataType) => {\n        if (values) {\n            props.addPost(values.newPostBody);\n        }\n\n    }\n\n    return <div className={s.postsBlock}>\n        <div>\n            <h3>My posts</h3>\n        </div>\n        <AddPostFormRedux onSubmit={onAddPost}/>\n\n        <div className={\"s.posts\"}>\n            {postsElements}\n        </div>\n    </div>\n})\n\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field name={'newPostBody'} component={Textarea} placeholder={'Enter your post text'}\n                       validate={[requiredField, maxLength100]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddPostFormRedux = reduxForm<FormDataType>({\n    form: 'profileAddPostForm'\n})(AddPostForm)\n\nexport default MyPosts;","import React from \"react\";\nimport './MyPosts.module.css';\nimport {addPost, changeText, ProfileReducerTypes} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppRootStateType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\nlet MapStateToStore = (state: AppRootStateType) => {\n    return {\n        posts: state.profilePage.posts,\n        value: state.profilePage.newText\n    }\n}\nlet MapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addPost: (text: string) => {\n            if (text) {\n                dispatch(addPost(text))\n            }\n        }\n    }\n}\n\nexport const MySuperPostContainer = connect(MapStateToStore, MapDispatchToProps)(MyPosts)\n","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport {MySuperPostContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"../../redux/profile-reducer\";\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nfunction Profile(props: ProfilePropsType) {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MySuperPostContainer/>\n        </div>\n    )\n}\n\nexport default Profile;","import {getStatus, ProfileType, updateStatus} from '../../redux/profile-reducer'\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {setUserProfile} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {getUserProfile} from \"../../redux/auth-reducer\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\nimport React, {ComponentType} from \"react\";\nimport {compose} from \"redux\";\n\ntype MapStatePropsType = {\n    profile: ProfileType | null\n    status: string\n    authorizedUserId: string\n}\n\ntype MapDispatchPropsType = {\n    setUserProfile: (profile: ProfileType) => void\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n}\n\nexport type ProfilePropsType = MapDispatchPropsType & MapStatePropsType\n\ntype PathParamsType = {\n    userId: string\n}\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    render() {\n        return (\n            <Profile status={this.props.status} updateStatus={this.props.updateStatus} profile={this.props.profile}/>\n        )\n    }\n\n}\n\n\nlet mapStateToProps = (state: AppRootStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n\n    }\n}\n\n\nexport default compose<ComponentType>(connect(mapStateToProps, {\n    setUserProfile,\n    getUserProfile,\n    getStatus,\n    updateStatus\n}), withRouter)(ProfileContainer)\n\n\n"],"sourceRoot":""}